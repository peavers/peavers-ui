name: Update Version, Tag, and Release
on:
  push:
    branches:
      - master
jobs:
  update-version-tag-and-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    env:
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current version and increment
        id: get_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=## Version: ).*' PeaversUI.toc)
          echo "Current version: $CURRENT_VERSION"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update TOC version
        run: |
          sed -i "s/^## Version: .*$/## Version: ${{ steps.get_version.outputs.new_version }}/" PeaversUI.toc

      - name: Commit TOC changes
        run: |
          git config user.name "Chris Turner"
          git config user.email "peavers@gmail.com"
          git add PeaversUI.toc
          git commit -m "chore: Update TOC version to ${{ steps.get_version.outputs.new_version }}"
          git push

      - name: Create and push tag
        id: create_tag
        run: |
          NEW_TAG="PeaversUI-${{ steps.get_version.outputs.new_version }}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.get_version.outputs.new_version }}
          draft: false
          prerelease: false

  package-and-release:
    needs: update-version-tag-and-release
    runs-on: ubuntu-latest
    env:
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags
      - name: Checkout tag
        run: git checkout ${{ needs.update-version-tag-and-release.outputs.new_tag }}
      - name: Package and release
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: package
