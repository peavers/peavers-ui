name: Update Version, Tag, and Release
on:
  push:
    branches:
      - master
jobs:
  update-version-tag-and-release:
    runs-on: ubuntu-latest
    env:
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get and increment latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "PeaversUI-1.0.0")
          echo "Latest tag: $latest_tag"
          if [[ $latest_tag == PeaversUI-* ]]; then
            version_number=${latest_tag#PeaversUI-}
            IFS='.' read -ra VERSION_PARTS <<< "$version_number"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            PATCH=$((PATCH + 1))
            new_version="${MAJOR}.${MINOR}.${PATCH}"
          else
            new_version="1.0.1"
          fi
          new_tag="PeaversUI-$new_version"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New tag will be: $new_tag"
      - name: Get current version from TOC
        id: get_current_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=## Version: ).*' PeaversUI.toc)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      - name: Update TOC version
        id: update_toc
        run: |
          sed -i "s/^## Version: .*$/## Version: ${{ steps.get_latest_tag.outputs.new_version }}/" PeaversUI.toc
      - name: Check for changes
        id: check_changes
        run: |
          git diff --exit-code PeaversUI.toc || echo "has_changes=true" >> $GITHUB_OUTPUT
      - name: Commit TOC changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config user.name "Chris Turner"
          git config user.email "peavers@gmail.com"
          git add PeaversUI.toc
          git commit -m "chore: Update TOC version to ${{ steps.get_latest_tag.outputs.new_version }}"
          git push
      - name: Create and push tag
        run: |
          git tag ${{ steps.get_latest_tag.outputs.new_tag }}
          git push origin ${{ steps.get_latest_tag.outputs.new_tag }}
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.new_tag }}
          release_name: Release ${{ steps.get_latest_tag.outputs.new_version }}
          draft: false
          prerelease: false
      - name: Create Package and Release on CurseForge
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        with:
          version: ${{ steps.get_latest_tag.outputs.new_version }}
